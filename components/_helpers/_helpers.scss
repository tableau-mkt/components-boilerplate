/**
 * Helpers
 *
 * General helper styles that can be used to overcome various common issues.
 */

/*
Proportionately resize iframes. Add class to a wrapper around the iframe. See
also the responsive-placeholder mixin for custom sizes. These are just the two
most common proportions for video players.
*/
.iframe-4-3,
.iframe-16-9 {
  position: relative;
  padding-bottom: 75%; /* 4:3 */
  height: 0;

  & iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}
.iframe-16-9 {
  padding-bottom: 56.25%; /* 16:9 */
}

// Relatively position an element
.relative {
  position: relative;
}

// Absolutely position an element
.absolute {
  position: absolute;
}

// Display an element as an inline element
.display-inline {
  display: inline;
}

// Display an element as an inline block element
.display-inline-block {
  display: inline-block;
}

// Display an element as a block element
.display-block {
  display: block;
}

// Display an element as a table
.display-table {
  display: table;
  width: 100%;
}

// Display an element as a table-cell
.display-table-cell {
  display: table-cell;
}

// Zero out the margins of an element
.margin-zero {
  margin: 0 !important;
}

// Zero out the padding of an element
.padding-zero {
  padding: 0 !important;
}

// Center an element using auto margins, because using text-align: center on the
// parent is not always enough. Example, tableau viz embeds.
.element-centered {
  margin-left: auto;
  margin-right: auto;
}

// Center an inline element.
.inline-centered {
  display: inline-block;
  position: relative;
  vertical-align: middle;
}

// Vertically aligns an element to the middle. Works well with display table-cell
.vertical-align-middle {
  vertical-align: middle;
}

// Vertically and horizontally center an element. This assumes the parent is
// has some kind of defined height and has position: relative;
.vertical-centered {
  @extend %vertical-centered;
}

// Vertically center an element using flexbox. Be aware this is unsupported in
// older browsers. Apply to the parent wrapper of elements that need vertical
// centering.
// @see %vertical-centered-flex placeholder which can't be used here due to
// breakpoint and @extend incompatibility.
.vertical-centered-flex {
  @include breakpoint($tablet-min) {
    display: flex;
    align-items: center;
  }
}

.absolute-centered {
  @extend %absolute-centered;
}

// Float element to the right
.float-right {
  float: right;
}

// Float element to the left
.float-left {
  float: left;
}

// Zero out the lineheight of an element
.line-height-zero {
  line-height: 0;
}

// Set the overflow of an element to hidden
.overflow-hidden {
  overflow: hidden;
}

// Trigger lazy momentum scroll, which allows a block element containing an
// interactive thing, such as a viz, to be scrolled.
.overflow-touch-scroll {
  overflow-y: hidden;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

// Use in cases where a link should not get an underline, e.g. on a navigation
// arrow.
.underline-none {
  @extend %underline-none;
}

// Hide inner text of an element
.hide-text {
  @extend %hide-text;
}

// Remove default list style and spacing
.plain-list {
  @extend %plain-list;
}

// Same as .plain-list, but also makes list items inline-block
.inline-list {
  @extend %inline-list;
}

// Clear floating of child elements
.clearfix {
  @extend %clearfix;
}

// Hide the element from being displayed
.hide {
  display: none;
}

// Set an element to an initially hidden state but to be revealed later.
.reveal-hidden {
  @extend %reveal-hidden;
}

// Apply styles for a background image to cover the container
.bg-cover {
  background-size: cover;
  background-position: center;
}

@include breakpoint($mobile-only) {
  // Hide the element from display only on the mobile breakpoint
  .mobile-hide {
    display: none !important;
  }

  // Center element on mobile breakpoint
  .mobile-center {
    text-align: center;
  }
}

@include breakpoint($tablet-min) {
  // Show element only on the mobile breakpoint
  .mobile-show {
    display: none !important;
  }
}

@include breakpoint($tablet-max) {
  // Hide the element from display only on the tablet breakpoint
  .tablet-hide {
    display: none !important;
  }

  // Show element only on the desktop breakpoint
  .desktop-show {
    display: none !important;
  }
}

@include breakpoint($desktop-only) {
  // Hide the element from display only on the desktop breakpoint
  .desktop-hide {
    display: none !important;
  }

  // Show element only on the tablet and mobile breakpoint
  .tablet-show {
    display: none !important;
  }

  // Center element on desktop breakpoint
  .desktop-center {
    text-align: center;
  }
}

.overlay-dark {
  &:before {
    content: ' ';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    opacity: 0.6;
    background-color: #333;
  }

  img {
    display: block;
    margin: 0 auto;
  }
}
